{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    systemName: \"csvreader\",\r\n    displayName: \"CSV Reader Broker\",\r\n    description: \"A broker that reads a CSV file and returns each line as a list.\"\r\n};\r\n\r\nondescribe = async function({configuration}): Promise<void> {\r\n    postSchema({\r\n        objects: {\r\n            \"lines\": {\r\n                displayName: \"Lines\",\r\n                description: \"Describes all lines in a CSV file\",\r\n                properties: {\r\n                    \"fileContent\": {\r\n                        displayName: \"File Content\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"line\": {\r\n                        displayName: \"Line\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    \"getLines\": {\r\n                        displayName: \"Get Lines\",\r\n                        type: \"read\",\r\n                        inputs: [ \"fileContent\" ],\r\n                        outputs: [ \"line\" ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\r\n    switch (objectName)\r\n    {\r\n        case \"lines\": await onexecuteSplit(methodName, properties); break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nasync function onexecuteSplit(methodName: string, properties: SingleRecord): Promise<void> {\r\n    switch (methodName)\r\n    {\r\n        case \"getLines\": await onexecuteLinesSplit(properties); break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteLinesSplit(properties: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) =>\r\n    {\r\n            try {\r\n                //test\r\n                const buff = bufferFrom(properties[\"fileContent\"].toString(), 'base64');\r\n                const str = buff.toString('utf-8');\r\n                \r\n                postResult({\r\n                    \"line\": str\r\n                });\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }        \r\n    });\r\n}"],"names":["metadata","systemName","displayName","description","ondescribe","async","configuration","postSchema","objects","properties","type","methods","inputs","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","str","bufferFrom","toString","postResult","e","onexecuteLinesSplit","Error","onexecuteSplit"],"mappings":"AAEAA,SAAW,CACPC,WAAY,YACZC,YAAa,oBACbC,YAAa,mEAGjBC,WAAaC,gBAAeC,cAACA,IACzBC,WAAW,CACPC,QAAS,OACI,CACLN,YAAa,QACbC,YAAa,oCACbM,WAAY,aACO,CACXP,YAAa,eACbQ,KAAM,eAEF,CACJR,YAAa,OACbQ,KAAM,WAGdC,QAAS,UACO,CACRT,YAAa,YACbQ,KAAM,OACNE,OAAQ,CAAE,eACVC,QAAS,CAAE,eAQnCC,UAAYT,gBAAeU,WAACA,EAADC,WAAaA,EAAbC,WAAyBA,EAAzBR,WAAqCA,EAArCH,cAAiDA,EAAjDY,OAAgEA,WAC/EH,OAEC,cAKbV,eAA8BW,EAAoBP,UACtCO,OAEC,iBAKb,SAA6BP,UAClB,IAAIU,QAAc,CAACC,EAASC,eAKjBC,EADOC,WAAWd,EAAU,YAAgBe,WAAY,UAC7CA,SAAS,SAE1BC,WAAW,MACCH,IAEZF,IACF,MAAOM,GACLL,EAAOK,MAlBQC,CAAoBlB,uBAC5B,IAAImB,MAAM,cAAgBZ,EAAa,uBATlCa,CAAeb,EAAYP,uBAChC,IAAImB,MAAM,cAAgBb,EAAa"}