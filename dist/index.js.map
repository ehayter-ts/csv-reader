{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    systemName: \"csvreader\",\n    displayName: \"CSV Reader Broker\",\n    description: \"A broker that reads a CSV file and returns each line as a list.\"\n};\n\nondescribe = async function({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"lines\": {\n                displayName: \"Lines\",\n                description: \"Describes all lines in a CSV file\",\n                properties: {\n                    \"file\": {\n                        displayName: \"File\",\n                        type: \"attachment\"\n                    },\n                    \"line\": {\n                        displayName: \"Line\",\n                        type: \"string\"\n                    }\n                },\n                methods: {\n                    \"getLines\": {\n                        displayName: \"Get Lines\",\n                        type: \"read\",\n                        inputs: [ \"file\" ],\n                        outputs: [ \"line\" ]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\n    switch (objectName)\n    {\n        case \"lines\": await onexecuteSplit(methodName, properties); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteSplit(methodName: string, properties: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case \"getLines\": await onexecuteLinesSplit(properties); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecuteLinesSplit(properties: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        // var xhr = new XMLHttpRequest();\n        // xhr.onreadystatechange = function() {\n            try {\n                postResult({\n                    \"line\": properties[\"file\"]\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }        \n        // if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        // xhr.open(\"GET\", 'https://jsonplaceholder.typicode.com/todos/' + encodeURIComponent(properties[\"id\"]));\n        // xhr.setRequestHeader('test', 'test value');\n        // xhr.send();\n    });\n}"],"names":["metadata","systemName","displayName","description","ondescribe","async","configuration","postSchema","objects","properties","type","methods","inputs","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","postResult","e","onexecuteLinesSplit","Error","onexecuteSplit"],"mappings":"AAEAA,SAAW,CACPC,WAAY,YACZC,YAAa,oBACbC,YAAa,mEAGjBC,WAAaC,gBAAeC,cAACA,IACzBC,WAAW,CACPC,QAAS,OACI,CACLN,YAAa,QACbC,YAAa,oCACbM,WAAY,MACA,CACJP,YAAa,OACbQ,KAAM,mBAEF,CACJR,YAAa,OACbQ,KAAM,WAGdC,QAAS,UACO,CACRT,YAAa,YACbQ,KAAM,OACNE,OAAQ,CAAE,QACVC,QAAS,CAAE,eAQnCC,UAAYT,gBAAeU,WAACA,EAADC,WAAaA,EAAbC,WAAyBA,EAAzBR,WAAqCA,EAArCH,cAAiDA,EAAjDY,OAAgEA,WAC/EH,OAEC,cAKbV,eAA8BW,EAAoBP,UACtCO,OAEC,iBAKb,SAA6BP,UAClB,IAAIU,QAAc,CAACC,EAASC,SAKvBC,WAAW,MACCb,EAAU,OAEtBW,IACF,MAAOG,GACLF,EAAOE,MAhBQC,CAAoBf,uBAC5B,IAAIgB,MAAM,cAAgBT,EAAa,uBATlCU,CAAeV,EAAYP,uBAChC,IAAIgB,MAAM,cAAgBV,EAAa"}