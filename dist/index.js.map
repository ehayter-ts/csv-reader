{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    systemName: \"csvreader\",\r\n    displayName: \"CSV Reader Broker\",\r\n    description: \"A broker that reads a CSV file and returns each line as a list.\"\r\n};\r\n\r\nondescribe = async function({configuration}): Promise<void> {\r\n    postSchema({\r\n        objects: {\r\n            \"lines\": {\r\n                displayName: \"Lines\",\r\n                description: \"Describes all lines in a CSV file\",\r\n                properties: {\r\n                    \"file\": {\r\n                        displayName: \"File\",\r\n                        type: \"attachment\"\r\n                    },\r\n                    \"line\": {\r\n                        displayName: \"Line\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"output\": {\r\n                        displayName: \"Output File\",\r\n                        type: \"attachment\"\r\n                    },\r\n                },\r\n                methods: {\r\n                    \"getLines\": {\r\n                        displayName: \"Get Lines\",\r\n                        type: \"read\",\r\n                        inputs: [ \"file\" ],\r\n                        outputs: [ \"line\", \"output\" ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\r\n    switch (objectName)\r\n    {\r\n        case \"lines\": await onexecuteSplit(methodName, properties); break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nasync function onexecuteSplit(methodName: string, properties: SingleRecord): Promise<void> {\r\n    switch (methodName)\r\n    {\r\n        case \"getLines\": await onexecuteLinesSplit(properties); break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nfunction onexecuteLinesSplit(properties: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) =>\r\n    {\r\n        // var xhr = new XMLHttpRequest();\r\n        // xhr.onreadystatechange = function() {\r\n            try {\r\n                postResult({\r\n                    \"line\": properties[\"file\"].filepath,\r\n                    \"output\": properties[\"file\"]\r\n                });\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }        \r\n        // if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\r\n        // xhr.open(\"GET\", 'https://jsonplaceholder.typicode.com/todos/' + encodeURIComponent(properties[\"id\"]));\r\n        // xhr.setRequestHeader('test', 'test value');\r\n        // xhr.send();\r\n    });\r\n}"],"names":["metadata","systemName","displayName","description","ondescribe","async","configuration","postSchema","objects","properties","type","methods","inputs","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","postResult","filepath","e","onexecuteLinesSplit","Error","onexecuteSplit"],"mappings":"AAEAA,SAAW,CACPC,WAAY,YACZC,YAAa,oBACbC,YAAa,mEAGjBC,WAAaC,gBAAeC,cAACA,IACzBC,WAAW,CACPC,QAAS,OACI,CACLN,YAAa,QACbC,YAAa,oCACbM,WAAY,MACA,CACJP,YAAa,OACbQ,KAAM,mBAEF,CACJR,YAAa,OACbQ,KAAM,iBAEA,CACNR,YAAa,cACbQ,KAAM,eAGdC,QAAS,UACO,CACRT,YAAa,YACbQ,KAAM,OACNE,OAAQ,CAAE,QACVC,QAAS,CAAE,OAAQ,iBAQ3CC,UAAYT,gBAAeU,WAACA,EAADC,WAAaA,EAAbC,WAAyBA,EAAzBR,WAAqCA,EAArCH,cAAiDA,EAAjDY,OAAgEA,WAC/EH,OAEC,cAKbV,eAA8BW,EAAoBP,UACtCO,OAEC,iBAKb,SAA6BP,UAClB,IAAIU,QAAc,CAACC,EAASC,SAKvBC,WAAW,MACCb,EAAU,KAASc,gBACjBd,EAAU,OAExBW,IACF,MAAOI,GACLH,EAAOG,MAjBQC,CAAoBhB,uBAC5B,IAAIiB,MAAM,cAAgBV,EAAa,uBATlCW,CAAeX,EAAYP,uBAChC,IAAIiB,MAAM,cAAgBX,EAAa"}