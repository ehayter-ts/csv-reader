{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\nimport '@k2oss/k2-broker-core/test-framework';\nimport './index';\n\nfunction mock(name: string, value: any) \n{\n    global[name] = value;\n}\n\ntest('describe returns the hardcoded instance', async t => {\n    let schema = null;\n    mock('postSchema', function(result: any) {\n        schema = result;\n    });\n\n    await Promise.resolve<void>(ondescribe({\n        configuration: {}\n    }));\n    \n    t.deepEqual(schema, {\n        objects: {\n            \"lines\": {\n                displayName: \"Lines\",\n                description: \"Describes all lines in a CSV file\",\n                properties: {\n                    \"file\": {\n                        displayName: \"File\",\n                        type: \"string\"\n                    },\n                    \"line\": {\n                        displayName: \"Line\",\n                        type: \"string\"\n                    }\n                },\n                methods: {\n                    \"getLines\": {\n                        displayName: \"Get Lines\",\n                        type: \"read\",\n                        inputs: [ \"file\" ],\n                        outputs: [ \"line\" ]\n                    }\n                }\n            }\n        }\n    });\n\n    t.pass();\n});\n\ntest('execute fails with the wrong parameters', async t => {\n    let error = await t.throwsAsync(Promise.resolve<void>(onexecute({\n        objectName: 'test1',\n        methodName: 'unused',\n        parameters: {},\n        properties: {},\n        configuration: {},\n        schema: {}\n    })));\n    \n    t.deepEqual(error.message, 'The object test1 is not supported.');\n\n    error = await t.throwsAsync(Promise.resolve<void>(onexecute({\n        objectName: 'lines',\n        methodName: 'test2',\n        parameters: {},\n        properties: {},\n        configuration: {},\n        schema: {}\n    })));\n    \n    t.deepEqual(error.message, 'The method test2 is not supported.');\n\n    t.pass();\n});"],"names":["test","async","schema","value","result","global","Promise","resolve","ondescribe","configuration","t","deepEqual","objects","displayName","description","properties","type","methods","inputs","outputs","pass","error","throwsAsync","onexecute","objectName","methodName","parameters","message"],"mappings":"0JASAA,EAAK,0CAA2CC,MAAAA,QACxCC,EAAS,KANjB,IAA4BC,EAAAA,EAOL,SAASC,GACxBF,EAASE,GANbC,OAKK,cALUF,QASTG,QAAQC,QAAcC,WAAW,CACnCC,cAAe,MAGnBC,EAAEC,UAAUT,EAAQ,CAChBU,QAAS,OACI,CACLC,YAAa,QACbC,YAAa,oCACbC,WAAY,MACA,CACJF,YAAa,OACbG,KAAM,eAEF,CACJH,YAAa,OACbG,KAAM,WAGdC,QAAS,UACO,CACRJ,YAAa,YACbG,KAAM,OACNE,OAAQ,CAAE,QACVC,QAAS,CAAE,cAO/BT,EAAEU,SAGNpB,EAAK,0CAA2CC,MAAAA,QACxCoB,QAAcX,EAAEY,YAAYhB,QAAQC,QAAcgB,UAAU,CAC5DC,WAAY,QACZC,WAAY,SACZC,WAAY,GACZX,WAAY,GACZN,cAAe,GACfP,OAAQ,OAGZQ,EAAEC,UAAUU,EAAMM,QAAS,sCAE3BN,QAAcX,EAAEY,YAAYhB,QAAQC,QAAcgB,UAAU,CACxDC,WAAY,QACZC,WAAY,QACZC,WAAY,GACZX,WAAY,GACZN,cAAe,GACfP,OAAQ,OAGZQ,EAAEC,UAAUU,EAAMM,QAAS,sCAE3BjB,EAAEU"}